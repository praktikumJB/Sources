///////////////////////////////////////////////////////////////////////////////
version="$Id$";
category="Miscellaneous";
info="
LIBRARY:  basics.lib    Some useful functions

AUTHORS:  J. Boehm, boehm @ mathematik.uni-kl.de

OVERVIEW:

This library contains elementary functions that should be in the kernel,
hence should be empty.

At the moment it contains:

Some useful basic functions from combinatorics.

KEYWORDS:
partitions, permutations, sum, max, min



PROCEDURES:

max                                       Maximum of two integers, rational numbers or real numbers
min                                       Minimum of two integers, rational numbers or real numbers
partitions(int, int)                      partitions of an integer into a fixed number of summands
permute(list)                             all permutations of a list
intersectLists(list,list)                 intersection of two lists
member(def,list)                          membership test

";



proc permute (list N)
"USAGE:  permute(N); N list@*
ASSUME:  N is a list@*
RETURN:  list with all permutations of N.
THEORY:  Computes all permutations of N.

         This will eventually be deleted and become a more efficient kernel function.
      
KEYWORDS: permutations
EXAMPLE:  example permute; shows an example
"
{
   int i,j,k;
   list L,L1;
   if (size(N)==1){
     return(list(N));
   } else {
     k=1;
     for (i=1; i<=size(N); i++){
       L=permute(delete(N,i));
       for (j=1; j<=size(L); j++){
          L1[k]=L[j]+list(N[i]);
          k=k+1;
       }
     }
   }
return(L1);}
example
{ "EXAMPLE:"; echo=2;
  ring R=(0,x1,x2,x3,x4),(q),dp;
  permute(list(x1,x2,x3,x4));
}



proc partitions(int n, int a)
"USAGE:  partitions(n,a); n int, a int@*
ASSUME:  n and a  are positive integers@*
RETURN:  list of all partitions of a into n summands.
THEORY:  Computes all partitions of a into n summands.

         This may eventually be deleted and become a more efficient kernel function.
      
KEYWORDS: partitions
EXAMPLE:  example partitions; shows an example
"
{
ring R = 2,(x(1..n)),dp;
ideal I = maxideal(a);
list L;
for (int j=1;j<=size(I);j++){
  L[j]=leadexp(I[j]);
}
return(L);}
example
{ "EXAMPLE:"; echo=2;
  partitions(3,7);
}



proc max(def n, def m){
if (n>m){return(n);}
return(m);}

proc min(def n, def m){
if (n<m){return(n);}
return(m);}


proc intersectLists(list L, list M){
list I;
int jj=1;
for (int j=1; j<size(L); j++)
{
   if (member(L[j],M)){I[jj]=L[j];jj=jj+1;}
}
return(I);};

//intersectLists(list(1,2,3),list(2,3,4));


proc member(def e, list L)
{
for (int j=1; j<size(L); j++)
{
  if (L[j]==e){
     return(1);
  }
}
return(0);}

//member(1,list(1,4,5));

