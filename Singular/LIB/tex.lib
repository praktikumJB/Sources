///////////////////////////////////////////////////////////////////////////////
version="$Id$";
category="Miscellaneous";
info="
LIBRARY:  tex.lib    printing latex code

AUTHORS:  J. Boehm, boehm @ mathematik.uni-kl.de
          M. Mueller, mkmuelle @ mathematik.uni-kl.de
          H. Rombach, rombach @ mathematik.uni-kl.de
          M. Stein, maxstein77 @ web.de

OVERVIEW:

latex conversion, we can use partly latex.lib

KEYWORDS:
tex



PROCEDURES:
tex(def)                general procedure to generate a latex code from a Singular object
compileTex(string)      compile latex code
viewTex(string)         compile and view latex code
";

LIB "matrix.lib";

LIB "latex.lib";


proc mod_init()
{
LIB "methods.lib";
HashTable F = hashTable(list(list("ring"),list("matrix"),list("int"),list("string")),list("texRing","texMatrix","texInt","texString"));
Method tex_ = method(F);
export(tex_); 
// export is broken in Singular at the moment, does not work for newstructs, so tex_ is not available, however the function tex works
installMethod(tex_,"tex");
}


//until the stuff above works
proc texALL(def d){
	if(typeof(d)=="ring"){
		return(texRing(d));
	}
	if(typeof(d)=="int"){
		return(texInt(d));
	}
	if(typeof(d)=="string"){
		return(texString(d));
	}
	if(typeof(d)=="poly"){
		return(texPoly(d));
	}
	if(typeof(d)=="list"){
		return(texList(d));
	}
	if(typeof(d)=="ideal"){
		return(texIdeal(d));
	}
	if(typeof(d)=="matrix"){
		return(texMatrix(d));
	}
	return("Sorry, not worked with "+string(typeof(d))+"  ,yet.")
}



proc texPolyMatrix(poly p){ // "texPoly" ohne schlie√üende $

string Output=texPoly(p);

Output=Output[2,size(Output)-2];

return(Output);
}



proc texMatrix(matrix m){

int r=nrows(m);
int c=ncols(m);
int i,j;
string t;
int z=0;

print("HINT: package \"amsmath\" is required for this operation.");
string s="$ \\begin{pmatrix} ";

for (i=1; i<=r; i++){

	for (j=1; j<c; j++){


		t=string(texPolyMatrix(m[j][i]));
				

				
				s=s+t+" & ";

				}				
		
	if(i<r){
		t = string(texPolyMatrix(m[c][i]));
		s = s + t + " \\\\ ";
	}

}	
	t = string(texPolyMatrix(m[c][r]));
	s = s + t + " \\end{pmatrix}$";

return(s);
}
/*********************************************************
**							**
**			  POLY				**
**							**
**______________________________________________________**
**							**
**							**
**							**
**							**
**							**
**							**
*********************************************************/

proc texPolyN(poly p){
	string S;
	
	int i;
	int nvar,npar;
	nvar = nvars(basering);	
	npar = npars(basering);


	list P,V,E;//parameters, variables, empty
	V = ringlist(basering)[2];
	if(size(ringlist(basering)[1])>1){
		P = ringlist(basering)[1][2];
		if(typeof(ringlist(basering)[1][2][1]) == "int"){P = E;}
	}
	
	
	list l = ringlist(basering);
	for(i = 1;i<=npar;i++){
		l[2][nvar+i] = "varTMP" + string(i);
	}
	def ringTMP = ring(l);

	for(i = 1;i<size(p);i++){
		S = S + texTerm(p[i],ringTMP,nvar)+"+";
	}
	S = S + texTerm(p[i],ringTMP,nvar);

	//S = "$" + S + "$";
return(S);
}
proc texTerm(poly p,def ringTMP,int nvar){
	string S;
	int b;
	intvec exp 	= leadexp(p);		//exponents
	list v 		= ringlist(basering)[2];//variables 
	poly c		= leadcoef(p);		//coefficient
	for(int i=1;i<=size(exp);i++){
		b = 0;
		if(exp[i]==1){S = S + string(v[i]);b=1;}
		if(exp[i]!=0 && b==0){S = S + string(v[i])+"^{"+string(exp[i])+"}";b=1;}
	}
	string C = texCOEF(c,ringTMP,nvar);
	S = C + S;
return(S);
}
proc texCOEF(poly c,def ringTMP, int nvar){
	//MENTION: IN C THERE ARE ONLY PARAMETERS, NO VARIABLES
	string S,S_TMP;
	def origin = basering;
	setring(ringTMP);//CAREFULL. NOW WE ARE IN OUR COOL HELPFUL RING
	poly c = fetch(origin,c);//c=c
	int i,k,L;
	int n 	= nvars(basering);
	int m	= npars(basering);
	list l 	= ringlist(basering);
	for(i = 1;i<=m;i++){
		c = subst(c,par(i),var(nvar+i));
	}
	int b = 0;
	for(i = 1;i<=size(l[2]);i++){
		if(find(string(c),string(l[2][i]))>0){b=1;}
		
	}
	
	//NOW there is NO PARAMETER. ONLY varTMP IN POLY c.
	//WE NEED TO KILL OUR PREVIOUS BASERING PARAMETERS
	l[1]=l[1][1];
	def r = ring(l);
	setring(r);
	poly c = fetch(ringTMP,c);
	if(b==1){S_TMP = texPolyN(c);}
	else{S_TMP = string(c);}
	//WE HAVE NOW A STRING, WITH THE varTMP INSTEAD of true parameters.
	/*for(i=1;i<=m;i++){
		k = find(S_TMP,string(l[2][nvar+i]));
		while(k!=0){
			//continue ur job here mr.crazyguy
		}

	}
	*/	
	S=S_TMP+S;
return(S);
}




/*followingfunctionswillbeeraste*/
proc texVariablesOfMonom(poly p){//returns a list of the variables of a monom (in dp/lp whatever...) 
	/*
	INPUT:
	@poly p: give a Monom in
	OUTPUT:
	a List of all variables of p (in LateX allready!)

	This function supports following types of Variables:
	(1)	x,y,z,.....(all letters)
	(2)	x1,x2,x3....(with all letters and all integers)
	(3)	x(1),x(2),...(with all letters and all integers)

	*/

	list l;
	string s = string(variables(p));
	string S;
	int k = 1;
	for(int i=1;i<=size(s);i++){
		if(s[i]=="0"){//keine Variable (konstantes Monom)
			l[k] = "const";
		}
		else{
			if(i == size(s)){//letzte Variable
				S	= S + s[i];
				if(size(S)>1){
					if(S[2]!="("){
						S = S[1]+"_{"+S[2,size(S)-1]+"}";
					}
					else{
						S = S[1]+"_{"+S[3,size(S)-3]+"}";
					}
				}
				l[k] 	= S;
				S	= "";
				k	= k+1;
			}
			else{//es gibt nochmehr
				if(s[i]!=","){
					S = S + s[i];
				}
				else{//ende erste Variable, es folgt noch eine
					if(S[2]!="("){
						S = S[1]+"_{"+S[2,size(S)-1]+"}";//tiefstellen
					}
					else{S = S[1]+"_{"+S[3,size(S)-3]+"}";}
					l[k] = S;
					S = "";
					k = k+1;	
				}
			}	
		}
	}
return(l);
}
proc texPoly(poly p){
	string  S ="$";
	list	l;
	intvec	v;
	poly P = p;
	poly d;
	int j;
	int k;
	int b = 0;//const monomial = 1
	int m = 1;
	for(int i=1;i<=size(p);i++){//for every monomial
		b =  1;
		if(leadcoef(P) == -1 && m==1){S=S+"-";}
		if((leadcoef(P) != 1 && leadcoef(P)!=-1)){
			if(m == 1 && leadcoef(P)<0){
				S = S +"-";
				m = 0;
			}
			string s = string(leadcoef(P));
			if(find(s,"/")==0){
				if(leadcoef(P)>0){
					S = S + string(leadcoef(P));
				}
				else{
					S = S+ string(-1*leadcoef(P));
				}
			}
			else{
				if(leadcoef(P)>0){
					
					S = S + "\\frac{"+string(leadcoef(P))[1,find(s,"/")-1]+"}";
					S = S + "{" + string(leadcoef(P))[find(s,"/")+1,size(string(leadcoef(P)))-find(s,"/")]+"}";
				}
				else{
					s = string((-1)*leadcoef(P));
					S = S + "\\frac{"+string((-1)*leadcoef(P))[1,find(s,"/")-1]+"}";
					S = S + "{" + string((-1)*leadcoef(P))[find(s,"/")+1,size(string(leadcoef(P)))-find(s,"/")-1]+"}";
				}	
			}
		}
		d = lead(P);
		l = texVariablesOfMonom(d);
		v = leadexp(d);
		k = 1;
		for(j=1;j<=size(v);j++){
		
			if(v[j]!=0){//Variable kommt vor
				if(v[j]==1){
					S = S+l[k]+"^{}";
					k = k+1;
					
				}
				else{
					S = S + l[k] +"^{"+string(v[j])+"}";
					k = k+1;
				}
				b = 0;
			}
			else{//Variable kommt nicht vor (eventuell konstant)
			}

		}
		P = P - d;
		if(i<size(p) && leadcoef(lead(P))>0){S=S+"+";}
		if(i<size(p) && leadcoef(lead(P))<0){S=S+"-";}
		if(i ==size(p) && leadcoef(d)==1 && b ==1 ){S = S+"1";}	
	}
	S = S + "$";
return(S);
}

/*********************************************************
**							**
**			ring				**
**							**
**______________________________________________________**
**							**
** HINT: lateX package  amssymb is required		**
**							**
**	list l: ringlist(r) with:			**
**		l1: (characteristic),minpoly,parameter	**
**		l2: variables				**
**							**
**							**
**	string p: minimalpolynom			**
**	string c: characteristic			**
**	string P: parameter (characteritic)		**
**	string V: variables				**
**	string S: output				**
**							**
**							**
**							**
**	int i:	counter variable			**
**	int b:  switch/case modifier			**
**							**
**							**
**	int bchar: what "kind" of characteristic	**
**		= 1: integer modulo tower		**
**		= 2: additional digits (i.e. real)	**
**		= 3: parameters exists			**
**							**
**							**
**							**
**							**
**							**
*********************************************************/



proc texRing(def r){
	list l,l1,l2;
	l 	= ringlist(r);
	l1	= l[1];
	l2	= l[2];
	


	string c,p,P,V,C,S;
	
	int i,b;
	int bchar;
		
	//characteristic
	c  = charstr(r);		
	bchar = 0;
	if(find(c,",") != 0){
		c 	= c[1,find(c,",")-1];
		b = 0;
		if(typeof(l[1][2][1]) != "string" && b==0&& c =="integer"){bchar= 1;b = 1;}	
		if(typeof(l[1][2][1]) != "string" && b==0){bchar  = 2;b=1;}
		if(b==0){bchar = 3;}
	}	
	
	//minimalpolynom
	p = string(minpoly);
	



	//parameters
	if(bchar==3){
		if(p != "0"){P=P+"[";}						
		else{P=P+"(";}
			for(i=1;i<size(l[1][2]);i++){
				P = P + string(l[1][2][i]) +",";
			}
			P=P+string(l[1][2][size(l[1][2])]);
		if(p != "0"){P=P + "]/_{"+p+"}";}
		else{P=P+")";}
	}


	//variables
	V = V + "[";
	for(i = 1;i<size(l2);i++){
		V = V + texRingVariablesEncoding(string(l2[i])) + ",";	
	}
	V = V + texRingVariablesEncoding(string(l2[size(l2)]));
	V = V + "]";

	b = 0;
	if(c == "integer" && b == 0){
		if(bchar==1){							//Z/(p^k)
			if(string(l[1][2][2])!="1"){
			C=C+"\\mathbb{Z}/_{"+string(l[1][2][1])+"^"+string(l[1][2][2])+"}";
			}
			else{C=C+"\\mathbb{Z}/_"+string(l[1][2][1]);}
			b = 1;
		}
		else{C = C + "\\mathbb{Z}";b=1;} 				//Z
	}
	if(c == "0" && b == 0){C = C + "\\mathbb{Q}";b=1;}			//Q
	if(c == "real" && b == 0){C = C + "\\mathbb{R}";b=1;}			//R
	if(c == "complex" && b == 0){
		b=1;
		if(typeof(l[1][3]) != "none"){
			if(l[1][3]!="i"){C = C + "\\mathbb{R}("+l[1][3]+")";}	//R(j)
			else{C = C + "\\mathbb{C}";}
		}
		else{C = C + "\\mathbb{C}";}					//C
	}
	if(b == 0){C = C + "\\mathbb{Z}/_{"+c+"}";b=1;}				//Z/p
	
	
	//epic conclusion
	if(size(P)!=0){S = S + C+P+V;}
	else{S=S+C+V;}
	
	S = "$" + S + "$";
return(S);
}

/*required for texRing and texMonom*/
proc texRingVariablesEncoding(string s){
	string S;
	int p; //position of "("
	if(size(s)<=1){S = s;}
	else{
		if(s[size(s)]==")"){//Variables of Type x(1),x(2),...
			p = find(s,"(");
			S = S + s[1,p-1] + "_{" + s[p+1,size(s)-3] + "}";
		}
		else{
			S = s[1]+"_{"+s[2,size(s)-1]+"}";
		}
	}

return(S);
}
/*********************************************************
**							**
**			IDEAL				**
**							**
*********************************************************/


proc texIdeal(ideal I){
	string S;
	list l = list(I);
	S = S+"<";
	S = S + texList(l);
	S = S+">";
return(S);
}


/*********************************************************
**							**
**			LIST				**
**							**
*********************************************************/
proc texList(list l){
	string S;
	int i;
	S = S + "$\\left\\{";
	for(i=1;i<size(l);i++){
		S=S+texALL(l[i])[2,size(texALL(l[i]))-2]+";";
	}
	S = S+texALL(l[size(l)])[2,size(texALL(l[i]))-2]+"\\right\\}$";
return(S);
}


/*********************************************************
**							**
**			INT				**
**							**
*********************************************************/
proc texInt(int i){
	return("$"+string(i)+"$");
}


/*********************************************************
**							**
**			STRING				**
**							**
*********************************************************/
proc texString(string s){
	return("$"+s+"$");
}

/*********************************************************
**							**
**			NUMBER				**
**							**
*********************************************************/

proc texNumber(number n){
	string s,S;
	s = string(n);
	find(s,"/");

return(S);
}





/*********************************************************
**							**
**			COMPILE				**
**							**
*********************************************************/


proc texMakePDF(string s){return(texMakeFile(s,"pdf"));}
proc texMakeDVI(string s){return(texMakeFile(s,"dvi"));}
proc texMakeFile(string s, string m){
	
	//@s: string, which will be compiled
	//@#: choice whether dvi//pdf
	
	string Sstart 	= "\\documentclass[a4paper,10pt]{article} \\author{SingularAlgebraSystem} \\usepackage{amssymb} \\begin{document} ";
	string Send	= " \\end{document}";
	string S = Sstart + s + Send;	
	write(":w singular_latex.tex", S);
	

	int b = 0;
	
	if(m == "dvi"){
		b = 1;
		system("sh","latex singular_latex.tex");
		
	}
	if(m=="pdf"){
		b = 1;
		system("sh","pdflatex singular_latex.tex");
		
	}
	
	return("file has been created.");
}
proc texViewPDF(){return(texViewFile("pdf"));}
proc texViewDVI(){return(texViewFile("dvi"));}
proc texViewFile(string m){
	if(m == "pdf"){return(system("sh","kpdf singular_latex.tex"));}
	if(m == "dvi"){return(system("sh","kdvi singular_latex.tex"));}
}
proc texRingTest(){
	
	print("ring r = 32003,(x,y,z),dp;");
	ring r = 32003,(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("32003,(x(1..10)),dp;");
	ring r = 32003,(x(1..10)),dp;
	texRing(r);
	print("----------------");
	print("ring r = 0,(a,b,c,d),lp;");
	ring r = 0,(a,b,c,d),lp;
	texRing(r);
	print("----------------");
	print("ring r =7,(x,y,z),ds;");
	ring r =7,(x,y,z),ds;
	texRing(r);
	print("----------------");
	print("ring r =7,(x(1..6)),(lp(3),dp);");
	ring r = 7,(x(1..6)),(lp(3),dp);
	texRing(r);
	print("----------------");
	print("ring r =0,(x,y,z),(c,wp(2,1,3));");
	ring r =0,(x,y,z),(c,wp(2,1,3));
	texRing(r);
	print("----------------");
	print("ring r =(7,a,b,c),(x,y,z),Dp;");
	ring r =(7,a,b,c),(x,y,z),Dp;
	texRing(r);
	print("----------------");
	print("ring r =(7,a),(x,y,z),dp; minpoly = a^2+a+3;");
	ring r =(7,a),(x,y,z),dp; minpoly = a^2+a+3;
	texRing(r);
	print("----------------");
	print("ring r =real,(x,y,z),dp;");
	ring r =real,(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =(real,50),(x,y,z),dp;");
	ring r =(real,50),(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =(real,10,50),(x,y,z),dp;");
	ring r =(real,10,50),(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =(complex,30,j),(x,y,z),dp;");
	ring r = (complex,30,j),(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =complex,(x,y,z),dp;");
	ring r =complex,(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =7,(x,y,z), dp;");
	ring r =7,(x,y,z), dp;
	texRing(r);
	print("----------------");
	print("ring r =integer,(x,y,z), dp;");
	ring r =integer,(x,y,z), dp;
	texRing(r);
	print("----------------");
	print("ring r =(integer, 6, 3),(x,y,z), dp;");
	ring r =(integer, 6, 3),(x,y,z), dp;
	texRing(r);
	print("----------------");
	print("ring r =(integer, 100),(x,y,z), dp;");
	ring r =(integer, 100),(x,y,z), dp;
	texRing(r);
	print("----------------");

return("Syntax korrekt. Semantik manuell pr√ºfen.");
}



