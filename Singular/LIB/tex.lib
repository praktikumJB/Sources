///////////////////////////////////////////////////////////////////////////////
version="$Id$";
category="Miscellaneous";
info="
LIBRARY:  tex.lib    printing latex code

AUTHORS:  J. Boehm, boehm @ mathematik.uni-kl.de
          M. Mueller, mkmuelle @ mathematik.uni-kl.de
          H. Rombach, HRombach @ gmx.de
          M. Stein, maxstein77 @ web.de

OVERVIEW:

latex conversion, we can use partly latex.lib

KEYWORDS:
tex



PROCEDURES:
tex(def)                general procedure to generate a latex code from a Singular object
compileTex(string)      compile latex code
viewTex(string)         compile and view latex code
";

LIB "matrix.lib";

LIB "latex.lib";


proc mod_init()
{
LIB "methods.lib";
HashTable F = hashTable(list(list("ring"),list("matrix"),list("int"),list("string")),list("texRing","texMatrix","texInt","texString"));
Method tex_ = method(F);
export(tex_); 
// export is broken in Singular at the moment, does not work for newstructs, so tex_ is not available, however the function tex works
installMethod(tex_,"tex");
}


proc texMatrix(matrix m){}

proc texInt(matrix m){}

proc texString(matrix m){}


proc texVariablesOfMonom(poly p){//returns a list of the variables of a monom (in dp/lp whatever...) 
	/*
	INPUT:
	@poly p: give a Monom in
	OUTPUT:
	a List of all variables of p (in LateX allready!)

	This function supports following types of Variables:
	(1)	x,y,z,.....(all letters)
	(2)	x1,x2,x3....(with all letters and all integers)
	(3)	x(1),x(2),...(with all letters and all integers)

	*/

	list l;
	string s = string(variables(p));
	string S;
	int k = 1;
	for(int i=1;i<=size(s);i++){
		if(s[i]=="0"){//keine Variable (konstantes Monom)
			l[k] = "const";
		}
		else{
			if(i == size(s)){//letzte Variable
				S	= S + s[i];
				if(size(S)>1){
					if(S[2]!="("){
						S = S[1]+"_{"+S[2,size(S)-1]+"}";
					}
					else{
						S = S[1]+"_{"+S[3,size(S)-3]+"}";
					}
				}
				l[k] 	= S;
				S	= "";
				k	= k+1;
			}
			else{//es gibt nochmehr
				if(s[i]!=","){
					S = S + s[i];
				}
				else{//ende erste Variable, es folgt noch eine
					if(S[2]!="("){
						S = S[1]+"_{"+S[2,size(S)-1]+"}";//tiefstellen
					}
					else{S = S[1]+"_{"+S[3,size(S)-3]+"}";}
					l[k] = S;
					S = "";
					k = k+1;	
				}
			}	
		}
	}
return(l);
}


proc texPoly(poly p){
	string  S ="$";
	list	l;
	intvec	v;
	poly P = p;
	poly d;
	int j;
	int k;
	int b = 0;//const monomial = 1
	for(int i=1;i<=size(p);i++){//for every monomial
		b =  1;
		if(leadcoef(P) != 1 && leadcoef(P)!=-1){
			if(leadcoef(P)>0){
				S = S + string(leadcoef(P));
			}
			else{
				S = S+ string(-1*leadcoef(P));
			}
		}
		d = lead(P);
		l = texVariablesOfMonom(d);
		v = leadexp(d);
		k = 1;
		for(j=1;j<=size(v);j++){
		
			if(v[j]!=0){//Variable kommt vor
				if(v[j]==1){
					S = S+l[k]+"^{}";//empty brackets are needed because of lateX "bug" with $$, at least in the tested compilers
					k = k+1;
					
				}
				else{
					S = S + l[k] +"^{"+string(v[j])+"}";
					k = k+1;
				}
				b = 0;
			}
			else{//Variable kommt nicht vor (eventuell konstant)
			}

		}
		P = P - d;
		if(i<size(p) && leadcoef(lead(P))>0){
			S=S+"+";
		}
		if(i<size(p) && leadcoef(lead(P))<0){
			S=S+"-";
		}
		if(i ==size(p) && leadcoef(d)==1 && b ==1 ){
			S = S+"1";	
		}
		//S = S + "| Runde: i = " + string(i)+" | ";		
	}
	S = S + "$";
return(S);
}

proc texRingTest(){
	
	print("ring r = 32003,(x,y,z),dp;");
	ring r = 32003,(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("32003,(x(1..10)),dp;");
	ring r = 32003,(x(1..10)),dp;
	texRing(r);
	print("----------------");
	print("ring r = 0,(a,b,c,d),lp;");
	ring r = 0,(a,b,c,d),lp;
	texRing(r);
	print("----------------");
	print("ring r =7,(x,y,z),ds;");
	ring r =7,(x,y,z),ds;
	texRing(r);
	print("----------------");
	print("ring r =7,(x(1..6)),(lp(3),dp);");
	ring r = 7,(x(1..6)),(lp(3),dp);
	texRing(r);
	print("----------------");
	print("ring r =0,(x,y,z),(c,wp(2,1,3));");
	ring r =0,(x,y,z),(c,wp(2,1,3));
	texRing(r);
	print("----------------");
	print("ring r =(7,a,b,c),(x,y,z),Dp;");
	ring r =(7,a,b,c),(x,y,z),Dp;
	texRing(r);
	print("----------------");
	print("ring r =(7,a),(x,y,z),dp; minpoly = a^2+a+3;");
	ring r =(7,a),(x,y,z),dp; minpoly = a^2+a+3;
	texRing(r);
	print("----------------");
	print("ring r =real,(x,y,z),dp;");
	ring r =real,(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =(real,50),(x,y,z),dp;");
	ring r =(real,50),(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =(real,10,50),(x,y,z),dp;");
	ring r =(real,10,50),(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =(complex,30,j),(x,y,z),dp;");
	ring r = (complex,30,j),(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =complex,(x,y,z),dp;");
	ring r =complex,(x,y,z),dp;
	texRing(r);
	print("----------------");
	print("ring r =7,(x,y,z), dp;");
	ring r =7,(x,y,z), dp;
	texRing(r);
	print("----------------");
	print("ring r =integer,(x,y,z), dp;");
	ring r =integer,(x,y,z), dp;
	texRing(r);
	print("----------------");
	print("ring r =(integer, 6, 3),(x,y,z), dp;");
	ring r =(integer, 6, 3),(x,y,z), dp;
	texRing(r);
	print("----------------");
	print("ring r =(integer, 100),(x,y,z), dp;");
	ring r =(integer, 100),(x,y,z), dp;
	texRing(r);
	print("----------------");

return("Syntax korrekt. Semantik manuell pr체fen.");
}

proc texRing(def r){
	print("HIND: lateX package \"amssymb\" is required.");
	
	list l 	= ringlist(r);	//Eigenschaften des Rings...
	int i;			//Z채hlervariablen
	int b;			//switch/case Manipulation
	string S  = "$";		//output final
	string V;		//output ring variables
	string S2 = ", where "; //output second half(if minpoly exists) 
	
	//Auslesen der Charakteristik (ohne Parameter)
	string c  = charstr(r);		
	string c2;			//"Restinformationen"
	int bchar = 0;
	if(find(c,",") != 0){
		c2 	= c[find(c,",")+1,size(c)];
		c 	= c[1,find(c,",")-1];
	}
	if(size(c2) > 0){
		b = 0;
		//if(find(c2,"^") != 0 && b == 0){bchar=1;b=1;}	//Z/a^b
		if(typeof(l[1][2][1]) != "string" && b ==0 && c =="integer"){
			bchar	=1;
			b	=1;
		}	
		if(typeof(l[1][2][1])!=	"string" && b ==0){bchar  = 2;b=1;}//addi. digits
		
		if(b==0){bchar = 3;}				//parameter
	}	
		
	
	//hunt for minpoly
	int bminpoly = 0; //=1 => minpoly existiert
	int iminpoly;
	list l1 = l[1];
	for(i = 1;i<=size(l1);i++){
		if(typeof(l1[i])=="ideal"){
			if(l1[i]!=0 && string(l1[i]) != "i" ){
				bminpoly	=1;
				iminpoly 	=i;
			}
		}
	}
	
	
	//hunt for localisation
	int blocal = 0;
	int blocal1 = 0;
	int blocal2 = 0;
	int i_local = 0;
	int posi_local;
	int c_local = 1; //counter
	list l_local;
	string s_l;
	if(typeof(l[3])!="none"){
		if(typeof(l[3])=="list"){
			for(i=1;i<=size(l[3]);i++){
				s_l = l[3][i][1];
				if(s_l =="ds" || s_l =="Ds" || s_l == "Ws"|| s_l == "ws" || s_l == "ls"){
					blocal1 = 1; 
					s_l = string(l[3][i][2]);
					while(42==42){
						if(find(s_l,",")!=0){
							c_local = c_local + 1;
							s_l = s_l[find(s_l,",")+1,size(s_l)];	
						}
						else{break;}
					}
					posi_local = i;
				}
				if(s_l =="lp"||s_l=="rp"||s_l=="dp"||s_l=="Dp"||s_l=="wp"||s_l=="Wp"){
					blocal2 = 1;
				}
				if(blocal2 == 1 && blocal1 == 1){blocal=1;}
		
			}
		}
	}
	


	//aufbauen der Parameter (abh채ngig von transzendent oder algebraisch
	string P;						//Parameter
	if(bchar==3){
		P = "\\mathbb{Z}/_{"+c;
		//print(bminpoly);
		if(bminpoly == 1){P=P+"[";}
		else{P=P+"(";}
			for(i=1;i<size(l[1][2]);i++){
				P = P + string(l[1][2][i]) +",";
			}
			P=P+string(l[1][2][size(l[1][2])]);
		if(bminpoly == 1){P=P+"]";}
		else{P=P+")";}
		P = P+"}";
	}

	//entsprechend der Charakteristik unser
	string C;						//"Oberring"
	b = 0;
	if(bchar==3 && b == 0){C = C + nameof(r); b = 1;}
	if(c == "integer" && b == 0){
		if(bchar==1){
			if(string(l[1][2][2])!="1"){
			C=C+"\\mathbb{Z}/_{"+string(l[1][2][1])+"^"+string(l[1][2][2])+"}";
			}
			else{C=C+"\\mathbb{Z}/_"+string(l[1][2][1]);}
			b = 1;
		}
		else{C = C + "\\mathbb{Z}";b=1;} 			//Z
	}
	if(c == "0" && b == 0){C = C + "\\mathbb{Q}";b=1;}		//Q
	if(c == "real" && b == 0){C = C + "\\mathbb{R}";b=1;}		//R
	if(c == "complex" && b == 0){
		b=1;
		if(typeof(l[1][3]) != "none"){
			if(l[1][3]!="i"){C = C + "\\mathbb{R}("+l[1][3]+")";}//R(j)
			else{C = C + "\\mathbb{C}";}
		}
		else{C = C + "\\mathbb{C}";}				//C
	}
	if(b == 0){C = C + "\\mathbb{Z}/_{"+c+"}";b=1;}			//Z/p
	
	//aufbauen der Variablen
	V = V + "[";
	list v = l[2];
	for(i = 1;i<size(v);i++){
		V = V + texRingVariablesEncoding(string(v[i])) + ",";	
	}
	V = V + texRingVariablesEncoding(string(v[size(v)]));
	V = V + "]";
	
	
	//aufbau abh채ngig von localisierung
	string P2;
	if(blocal ==1){
		print("WARNING: localisations are still semi-total-buggy!!! :(");
		P2="("+C+"[";
		
		if(posi_local ==2){
		
			for(i=1;i<c_local;i++){
				
				P2 = P2  + texRingVariablesEncoding(string(l[2][i]))+",";
			}
			P2 = P2 +texRingVariablesEncoding(string(l[2][c_local]))+"])[";
			
			for(i=c_local+1;i<size(l[2]);i++){
				P2 = P2 + texRingVariablesEncoding(string(l[2][i]))+",";
			}
			P2 = P2 + texRingVariablesEncoding(string(l[2][size(l[2])]))+"]";
		}	
		if(posi_local ==1){
			print(size(l[3]));
			print(size(l[3])-c_local);
			print(c_local);
			for(i=(t-c_local+1);i<size(l[3]);i++){
				P2 = P2  + texRingVariablesEncoding(string(l[2][c_local+i]))+",";
			}
			P2 = P2 +texRingVariablesEncoding(string(l[2][size(l[2])]))+"])[";
			for(i=1;i<c_local;i++){
				P2 = P2 + texRingVariablesEncoding(string(l[2][i]))+",";
			}
			P2 = P2 + texRingVariablesEncoding(string(l[2][c_local]))+"]";


		}
		S = P2;
	}
	//epic conclusion
	if(blocal ==0){
	if(size(P)!=0){S=S+C+V+S2+C + "="+P;}
	else{S=S+C+V;}
	}
	S = S +"$";
return(S);
}

/*required for texRing*/
proc texRingVariablesEncoding(string s){
	string S;
	int p; //position of "("
	if(size(s)<=1){S = s;}
	else{
		if(s[size(s)]==")"){//Variables of Type x(1),x(2),...
			p = find(s,"(");
			S = S + s[1,p-1] + "_{" + s[p+1,size(s)-3] + "}";
		}
		else{
			S = s[1]+"_{"+s[2,size(s)-1]+"}";
		}
	}

return(S);
}

// usw
