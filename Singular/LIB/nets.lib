/*Matrix: - lange Version: Standartpolynomausgabe: fertig
			 - kurze Version: "Leitterm+..." : fertig	
	Poly: - die Polyausgabe scheint auch für Ringe mit algeraisch erweiterten Koeffizientenringen zu funktionieren
  
	Procedures: - netList
  				- netCofficientRing
  				- netPrimePower
  				- netMap
  				- netMap2 
  				- netMatrix
  				- netMatrixShort
  				- netBigIntMatrix
  				- netIntMatrix 
  				- netInt
  				- netŚtring
  				- netMatrix3 (two-column poly output) 
  				- netPoly
  				- netPolyMatrix (entries for netMatrix3)
  				- netIdeal
*/

// globale Variable für die Ausgabenlänge von netIntMat etc.

///////////////////////////////////////////////////////////////////////////////
version="$Id$";
category="Miscellaneous";
info="
LIBRARY:  net.lib    Net structures for pretty printing

AUTHORS:  J. Boehm, boehm @ mathematik.uni-kl.de
          M. Mueller, mkmuelle @ mathematik.uni-kl.de
          H. Rombach, rombach @ mathematik.uni-kl.de
          M. Stein, maxstein77 @ web.de

OVERVIEW:

Nets are arrays of characters, which are printed in a matrix format. They can be
concatenated horizontally and vertically. When concatenating horizontally, empty
rows are filled with spaces. All Singular types can be converted to a Net by applying
the command net.

KEYWORDS:
net


TYPES:
Net                     The class of all nets

PROCEDURES:
net(def)                general procedure to generate a net from a Singular object
catNets(Net,Net)         horizontal concatenation
stackNets(Net,Net)       vertical concatenation
printNet
";

LIB "matrix.lib";
LIB "qhmoduli.lib";


proc mod_init()
{
	LIB "methods.lib";
	newstruct("Net","list rows");
	system("install","Net","print",printNet,1);
	system("install","Net","+",catNets,2);
	HashTable F = hashTable(list(list("ring"),list("matrix"),list("int"),list("string")),list("netRing","netMatrix","netInt","netString"));
	Method net_ = method(F);
	export(net_); 
	//export for newstructs is broken in Singular at the moment, so net_ is not available outside of the library, however net works
installMethod(net_,"net");
}


static proc emptyString(int n)
{
	string S="";
	for (int j=1; j<=n; j++)
	{
  		S=S+" ";
	}
	
return(S);
}



////
proc printNet(Net N)
	{
	list L = N.rows;
	for (int j=1; j<=size(L); j++)
	{
  	 print(L[j]);
	}
}



////
proc stackNets(Net N, Net M)
{
	list LN=N.rows;
	list LM=M.rows;
	Net NM;
	NM.rows=LN+LM;
	
return(NM);
}



////
proc catNets(Net N, Net M)
{
	list L, MAX;
	list LN=N.rows;
	list LM=M.rows;
	int widthN=size(LN[1]);
	int widthM=size(LM[1]);
	MAX[1]=size(LN);
	MAX[2]=size(LM);
	int nm=Max(MAX); /*Eine Funktion max() ist in der Bib qhmoduli.lib und heißt Max(), als Argumente nimmt die Funktion Integer-Vektoren oder -Listen*/
	for (int j=1; j<=nm; j++)
	{
   	if (j>size(LN)){LN[j]=emptyString(widthN);}
    	if (j>size(LM)){LM[j]=emptyString(widthM);}
    	L[j]=LN[j]+LM[j];
	}
	Net NM;
	NM.rows=L;
	
return(NM);
}



////
proc netList(list L1)
{
  Net N=net("[");
  for (int j=1; j<=size(L1)-1; j++)
  {
     N=N+net(L1[j])+net(", ");
  }
  N=N+net(L1[size(L1)])+net("]");
  return(N);
}



////
proc netCoefficientRing(def R)
{
  list RL = ringlist(R);
  Net field;
  list pf;
  if (typeof(RL[1])=="list")
  {
    if (RL[1][1]==0){
         field=net("QQ");
         if (minpoly!=0){
            field=field+net("[")+net(string(RL[1][2]))+net("]");
            field=field+net("/")+net(minpoly);
         } else {
            field=field+net("(")+net(string(RL[1][2]))+net(")");
         }
    }
    if (RL[1][1]>0){
       pf = primefactors(RL[1][1]);
       if (pf[2][1]>1)
       {
         field=net("FF_")+netPrimePower(pf[1][1],pf[2][1])+net("");
       } else {
         field=net("FF_")+net(RL[1][1]);
         if (minpoly!=0){
            field=field+net("[")+net(string(RL[1][2]))+net("]");
            field=field+net("/")+net(minpoly);
         } else {
            field=field+net("(")+net(string(RL[1][2]))+net(")");
         }
       }
    }
  } else {
    if (RL[1]==0){field=net("QQ");}
    if (RL[1]>0){
         field=net("FF_")+net(RL[1]);
    }
  }
return(field);
}



////
proc netPrimePower(int n, int r)
{
	if (r==1)
	{
		return(net(n));
	}
	
return(net(n)+net("^")+net(r));
}



////
proc netRing(def R)
{
 	list RL = ringlist(R);
  	Net N=netCoefficientRing(R)+net("[")+net(string(RL[2]))+net("]");
  	
return(N);
}



////
proc netMap( map f)
{
	list Output;
	string Map, Source, Target;
	int i, v, empty;
	Net M;

	Map=string(nameof(f));
	Source=string(nameof(preimage(f)));
	Target=string(nameof(basering));

	Output[1]=Map+": "+Source+" -->I "+Target;

	v=size(ringlist(preimage(f))[2]);
	
	empty=size(Output[1]);
	
	Output[1]=Output[1]+" , "+string(ringlist(preimage(f))[2][1])+" -> "+string(f[1]);

	for (i=2; i<=v; i++)
	{
		Output[i]=emptyString(empty)+" , "+string(ringlist(preimage(f))[2][i])+" -> "+string(f[i]);
	}
	
	M.rows=Output;
	
return(M);
}




////
proc netMap2( map f)
{
	list Output;
	string Map, Source, Target;
	int i, v, empty;
	Net M;

	Map=string(nameof(f));
	Source=string(nameof(preimage(f)));
	Target=string(nameof(basering));

	Output[1]=Map+": "+Source+" --> "+Target;

	v=size(ringlist(preimage(f))[2]);
	
	empty=size(Output[1]);
	
	Output[1]=Output[1]+" , "+string(ringlist(preimage(f))[2][1])+" -> "+string(f[1]);

	for (i=2; i<=v; i++)
	{
		Output[1]=Output[1]+" , "+string(ringlist(preimage(f))[2][i])+" -> "+string(f[i]);
	}
	
	M.rows=Output;
	
return(M);
}



////
proc netBigIntMatrix(bigintmat M)
{ 
	int Length=5; //Länge der Ausgabe
	
	string S;
   list L, SizeCol;
   int wd,defect;
   int i,j;
   
 //
   for (j=1; j<=ncols(M); j++)
	{
		SizeCol[j]=0;
	}
		
//	
	for (j=1; j<=ncols(M); j++)
	{
		for (i=1; i<=nrows(M) ; i++)
		{
			if ( SizeCol[j] < size(string(M[i,j])) )
			{
				SizeCol[j]=size(string(M[i,j]));
			}
		}
	}
//
   for ( i=1; i<=nrows(M); i++ )
   {
   	for ( j=1; j<=ncols(M); j++ )
    	{
    		if ( j!=1 )
    		{
    			S=S+" ";
    		}
    		defect=SizeCol[j]-size(string(M[i,j]));
    		S=S+string(M[i,j])+emptyString(defect);
      }
      L[i]=S;
      S="";
    }
//      
    for (j=1; j<=nrows(M); j++)
    {
       L[j]="| "+L[j]+" |";
    }
    
    Net NM;
    NM.rows=L;
    
return(NM);
}



////
proc netBigIntMatrixShort(bigintmat M)
{
 	int Length=5; // Länge der Ausgabe 
 
	string S;
   list L, SizeCol, SizeColShort;
   int wd,defect;
   int i,j;
   
 //
   for (j=1; j <= ncols(M); j++)
	{
		SizeCol[j]=0;
	}
	
//	
	for (j=1; j <= ncols(M); j++)
	{
		SizeColShort[j]=0;
	}
	
//
	for (j=1; j <= ncols(M); j++)
	{
		for (i=1; i <= nrows(M) ; i++)
		{
			if ( SizeColShort[j] < size(string(M[i,j])) )
			{
				SizeCol[j]=size(string(M[i,j]));
				SizeColShort[j]=size(string(M[i,j]));
			}
		}
	}

//
	for (j=1; j <= ncols(M); j++)
	{
		if( SizeColShort[j] > Length )
		{
			SizeColShort[j]=Length;
		}
	}
	
// 
    for (i=1; i<=nrows(M); i++ )
    {
    	for (j=1; j<=ncols(M); j++ )
    	{
    		if ( j!=1 )
    		{
    			S=S+" ";
    		}
    		
    	// 
    		if ( SizeCol[j] > 5 )
    		{
    			if ( size(string(M[i,j])) >= Length )
    			{
    				S=S+string(M[i,j])[1,Length]+"...";
    			}
    	 	
    			else
    			{
    				defect=SizeColShort[j]+3-size(string(M[i,j]));
    				S=S+string(M[i,j])+emptyString(defect);
     			}
     		}
     		
     		else
     		{
     			defect=SizeColShort[j]-size(string(M[i,j]));
     			S=S+string(M[i,j])+emptyString(defect);
     		}
     		
     	}
     		
      L[i]=S;
      S="";
    }
    
//      
    for (j=1; j<=nrows(M); j++)
    {
       L[j]="| "+L[j]+" |";
    }
    
    Net NM;
    NM.rows=L;
    
return(NM);
}



////
proc netIntMatrix(intmat M)
{ 
	
	int m=nrows(M);
	int n=ncols(M);
	bigintmat B[m][n]=bigintmat(M);
	
	Net Output=netBigIntMatrix(B);
	
	return(Output);
}	



////
proc netIntMatrixShort(intmat M)
{ 
	
	int m=nrows(M);
	int n=ncols(M);
	bigintmat B[m][n]=bigintmat(M);
	
	Net Output=netBigIntMatrixShort(B);
	
	return(Output);
}	



////
proc netMatrix(matrix M){ 
	string S;
   list L, SizeCol;
   int wd,defect;
   int i,j;
   
 //
   for (j=1; j<=ncols(M); j++)
	{
		SizeCol[j]=0;
	}

//	
	for (j=1; j<=ncols(M); j++)
	{
		for (i=1; i<=nrows(M) ; i++)
		{
			if(SizeCol[j]<size(string(M[i,j])))
			{
			 SizeCol[j]=size(string(M[i,j]));
			}
		}
	}
	
//  
    for ( i=1; i<=nrows(M); i++ )
    {
    	for ( j=1; j<=ncols(M); j++ )
    	{
    		if ( j!=1 )
    		{
    		S=S+" ";
    		}
    		
    		defect=SizeCol[j]-size(string(M[i,j]));
    		S=S+string(M[i,j])+emptyString(defect);
      }
      L[i]=S;
      S="";
    }
    
//      
    for (j=1; j<=nrows(M); j++)
    {
       L[j]="| "+L[j]+" |";
    }
    
    Net NM;
    NM.rows=L;
    
return(NM);
}



////
proc netMatrixShort(matrix M)
{ 
	string S;
   list L, SizeCol;
   int wd,defect;
   int i,j;
   
 //
   for (j=1; j<=ncols(M); j++)
	{
		SizeCol[j]=0;
	}

//
	for (j=1; j<=ncols(M); j++)
	{
		for (i=1; i<=nrows(M) ; i++)
		{
			if(SizeCol[j]<size(string(lead(M[i,j]))))
			{
			 SizeCol[j]=size(string(lead(M[i,j])));
			}
		}
	}
	
// 
    for ( i=1; i<=nrows(M); i++ )
    {
    	for ( j=1; j<=ncols(M); j++ )
    	{
    		if ( j!=1 )
    		{
    		S=S+" ";
    		}
    		
    		defect=SizeCol[j]-size(string(M[i,j]));
    		S=S+string(lead(M[i,j]))+"+..."+emptyString(defect);
      }
      L[i]=S;
      S="";
    }
    
//      
    for (j=1; j<=nrows(M); j++)
    {
       L[j]="| "+L[j]+" |";
    }
    
    Net NM;
    NM.rows=L;
    
return(NM);
}


////
proc netInt(int M)
{
  Net N;
  list L;
  L[1]=string(M);
  N.rows=L;
return(N);
}



////
proc netString(string M)
{
  Net N;
  list L;
  L[1]=M;
  N.rows=L;
return(N);
}


////
proc netMatrix3(matrix M) // Matrixausgabe mit 2-Zeilen Polynomausgabe
{ 
list Output, SizeCol;
string S; // zum Füllen der Liste Output
int i,j,k,defect;

	// 1 // Liste 'SizeCol' mit Nullen füllen
	
	for(j=1; j<=ncols(M); j++)
	{
		SizeCol[j]=0;
	}
    
    // 2 // Abfrage der Spaltenbreite
    
    for(j=1; j<=ncols(M); j++)
    {
    	for(i=1; i<=nrows(M); i++)
    	{
    		if(SizeCol[j]<=size(netPolyMatrix(M[i,j])[2]))
    		{
    			SizeCol[j]=size(netPolyMatrix(M[i,j])[2]);
    		}
    	}
    }

    // 3 // Erstellung der Matrixzeilen		
    		
    for(k=1; k<=(2*nrows(M)); k++) //Erstellung von von 2*nrows(M) Zeilen
    {

    	i=(k+1) div 2; //Klammerung beachten
    	
		if(k mod 2==1) // ungerade=obere Zeile wird gesetzt
     	{
     		S=" |";
     		Output[k]=S;

     		for(j=1; j<=ncols(M); j++)
     		{
     			if(j!=1)
     			{
     				defect=SizeCol[j]-size(netPolyMatrix(M[i,j])[1]);
     				S=" "+Output[k]+netPolyMatrix(M[i,j])[1]+emptyString(defect);
     				Output[k]=S;
    			}
    			else
     			{
     				defect=SizeCol[j]-size(netPolyMatrix(M[i,j])[1]);
     				S=Output[k]+netPolyMatrix(M[i,j])[1]+emptyString(defect);
     				Output[k]=S;
    			}
    		}
    	}
    	
    
    	
    	if(k mod 2==0) // gerade=untere Zeile wird gesetzt
     	{
     		S=string(i)+"|";
     		Output[k]=S;
     		
     		for(j=1; j<=ncols(M); j++)
     		{
				if(j!=1)
				{
     				defect=SizeCol[j]-size(netPolyMatrix(M[i,j])[2]);
     				S=" "+Output[k]+netPolyMatrix(M[i,j])[2]+emptyString(defect);
     				Output[k]=S;
     			}
     			else
     			{
     				defect=SizeCol[j]-size(netPolyMatrix(M[i,j])[2]);
     				S=Output[k]+netPolyMatrix(M[i,j])[2]+emptyString(defect);
     				Output[k]=S;
     			}
    		}
    	}
    	
    	S=Output[k]+"|";
    	Output[k]=S;
    }
    	
    Net NM;
    NM.rows=Output;
return(NM);
}



////
proc netPoly(poly P)
{
	poly Lead;
	list Output;
	Net N;
	string Up, Down, Control; //getrennte Strings für die Ausgabe der beiden Zeilen
	int s,i;
	int v=-1;
	number Zero=0; // um bei den Vergleichen kompatibel zu machen
	number One=1;

//
	if (P==0) 
	{
		Down="0";
	}

//
	else 
		{
		while(P!=0)
		{	
			Control=Down;
		
			if ( Control == "" ) 
			{ 
				if( leadcoef(P) == One || leadcoef(P) == -One )
					{
						if ( leadexp(P) == 0 )
						{
							if ( leadcoef(P) == One )
							{
								Down=Down+"1"; 
								Up=Up+emptyString(1);
							}
							
							else
							{
								Down=Down+"-1"; 
								Up=Up+emptyString(2);
							}
						}
						
						else
						{
							if ( leadcoef(P) == One )
								{
								}	
							else
							{
								Down=Down+"-"; 
								Up=Up+emptyString(1);
							}
						}
					}
				
				else
				{
					Down=Down+string(leadcoef(P)); // ganzer Koeffizient wird gesetzt
					Up=Up+emptyString(size(string(leadcoef(P))));
				}
			}
	
			if ( Control != "" ) 
			{
		
				Lead=leadcoef(P);
		
				if( Lead < Zero  ) // Negatives Vorzeichen setzen, Bedingung falsch -> Wahrheitswert 1
				{
					if ( Lead == -One ) // number == int ->richtige Wahrheitswerte
					{
				
						if (  leadexp(P) == 0 )
						{
							Down=Down+"-1";
							Up=Up+emptyString(2);
						}
					
						else
						{
							Down=Down+"-";
							Up=Up+emptyString(1);
						}
					}
						
					else
					{
						Down=Down+string(leadcoef(P));
						Up=Up+emptyString(size(string(leadcoef(P))));
					}
				
				}
		
				else // Bei positivem Koeffizienten muss die Verknüpfung gesetzt werden
				{ 
					Down=Down+"+";
					Up=Up+emptyString(1);
			
					if( Lead != One )
					{				
						Down=Down+string(leadcoef(P));
						Up=Up+emptyString(size(string(leadcoef(P))));
					}
				}
			}

	
			if ( leadexp(P) != 0 ) 
			{		
				for(i=1; i<=size(leadexp(P)); i++)
				{
					if((leadexp(P)[i])!=0)
					{
						if(leadexp(P)[i]==1)
						{
							Down=Down+string(((ringlist(basering))[2])[i]); /*Varialen werden aus der Ringliste geladen*/
							Up=Up+emptyString(size(string(((ringlist(basering))[2])[i])));
						}
						else
						{
						Down=Down+string(((ringlist(basering))[2])[i]); /*Varialen werden aus der Ringliste geladen*/
						Up=Up+emptyString(size(string(((ringlist(basering))[2])[i]))); /* +1 für "*" */
				
						Up=Up+string((leadexp(P))[i]); /* Der zugehörige Exponent wird hinzugefügt*/
						Down=Down+emptyString(size(string((leadexp(P))[i])));
						}
					}
				}
			}
	
		P=P-lead(P);
		}
	}

	Output=Up,Down;
	N.rows=Output;

return(N);
}



////
proc netPolyMatrix(poly M)
{
	string Up, Down; //getrennte Strings für die Ausgabe der beiden Zeilen

 	if (M==0) 
 	{
 		Down="0";
 	}

 	else 
 	{

 /*getrennte Strings für die Ausgabe der beiden Zeilen*/
		int s,i;

 		while(M!=0)
 		{
			if(Down=="")
			{ //Erstes Zeichen wir in den String geschrieben
				if(leadcoef(M)==1 || leadcoef(M)==-1)
				{
					if(leadcoef(M)==1)
					{
					}
					
					else
					{
						Down=Down+"-"; 
						Up=Up+emptyString(1);
					}
				}
		
			else
			{
				Down=Down+string(leadcoef(M)); // ganzer Koeffizient wird gesetzt
				Up=Up+emptyString(size(string(leadcoef(M))));
			}
		}
	
		else
		{
			if(leadcoef(M)<=0) //Negatives Vorzeichen setzen
			{ 
				if (leadcoef(M)==-1)
				{
					Down=Down+"-";
					Up=Up+emptyString(1);
				}		
				
				else
				{
					Down=Down+string(leadcoef(M));
					Up=Up+emptyString(size(string(leadcoef(M))));
				}
			}
		
			else{ //Bei positivem Koeffizienten muss die Verknüpfung gesetzt werden
				Down=Down+"+";
				Up=Up+emptyString(1);
			
				if(leadcoef(M)!=1)
				{
					Down=Down+"+"+string(leadcoef(M));
					Up=Up+emptyString(size(string(leadcoef(M)))+1);
				}
			}
		}

	
		if (leadexp(M)!=0) //treten Variablen in lead(M) auf 
		{
			for(i=1; i<=size(leadexp(M)); i++)
			{
				if(((ringlist(basering))[2])[i]!=0) // tritt die variable in lead
				{ 
					if(((ringlist(basering))[2])[i]==1) // Variable tritt in erster Potenz auf
					{ 
						Down=Down+string(((ringlist(basering))[2])[i]); /*Variale werden aus der Ringliste geladen*/
						Up=Up+emptyString(size(string(((ringlist(basering))[2])[i])));
					}
					else
					{
						Down=Down+string(((ringlist(basering))[2])[i]); /*Varialen werden aus der Ringliste geladen*/
						Up=Up+emptyString(size(string(((ringlist(basering))[2])[i]))); /* +1 für "*" */
				
						Up=Up+string((leadexp(M))[i]); /* Der zugehörige Exponent wird hinzugefügt*/
					
						Down=Down+emptyString(size(string((leadexp(M))[i])));
					}
				}
			}
		}
		
		M=M-lead(M);
 		}
	}

	list Output=Up,Down;

 return(Output);
}



////
proc netIdeal(ideal I){

 Net N=net("<");
 for (int i=1; i<size(I); i++)
 {
   N=N+net(I[i])+net(", ");
 }
 N=N+net(I[size(I)])+net(">");
 return(N);
}


// usw
