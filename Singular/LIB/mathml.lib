///////////////////////////////////////////////////////////////////////////////
version="$Id$";
category="Miscellaneous";
info="
LIBRARY:  mathml.lib    printing latex code

AUTHORS:  J. Boehm, boehm @ mathematik.uni-kl.de
          M. Mueller, mkmuelle @ mathematik.uni-kl.de
          H. Rombach, HRombach @ gmx.de
          M. Stein, maxstein77 @ web.de

OVERVIEW:

mathml conversion

KEYWORDS:
mathml



PROCEDURES:
mathml(def)                general procedure to generate a mathml code from a Singular object
viewMathml(string)         view mathml code
";

LIB "matrix.lib";



proc mod_init()
{
LIB "methods.lib";
HashTable F = hashTable(list(list("ring"),list("matrix"),list("int"),list("string")),list("mathmlRing","mathmlMatrix","mathmlInt","mathmlString"));
Method mathml_ = method(F);
export(mathml_); 
// export is broken in Singular at the moment, does not work for newstructs, so mathml_ is not available, however the function tex works
installMethod(mathml_,"tex");
}


proc mathmlMatrix(matrix m){
 string s;
 int i=1;
 int j=1;
 s=s+"<math xmlns=http://www.w3.org/1998/Math/MathML><!doctype html> <mfenced open=[ close=]> <mtable>";
  while (i<=nrows(m)) {
   j=1;
    s=s+"<mtr>";
    while (j<=ncols(m)) {
      s=s+"<mtd> <mi>"+string(m[i,j])+"</mi></mtd>";
      j=j+1;
     }
     s=s+"</mtr>";
    i=i+1;
  }
return(s);
}

proc mathmlInt(int m){
 return("<mn>"+string(m)+"</mn>");}

proc mathmlString(string m){
 return(m);}

proc mathmlLeadCoef(string s) {
string t;
int i=1;
int u=0;
if (s=="1"){return(t);}
if (s=="-1"){return("<mo>-</mo>");}
 while (i<size(s)) {
   if (s[i]=="/")  {u=1;
                    i=size(s);} 
   i=i+1;
  }
i=1;
if (u==1) {
   if (s[1]=="-") {
   t="<mo>-</mo>";
   i=2;}
   t=t+"<mfrac> <mn>";
 while (i<=size(s)) {
    if (s[i]=="/") {t=t+"</mn> <mn>";} 
    else           {t=t+s[i];}
    i=i+1;
    }
   t=t+"</mn> </mfrac>";
  }
if (u==0) {
  if (s[1]=="-") {t=t+"<mo>-</mo>";s=s[2,size(s)-1];}
  t=t+"<mn>"+s+"</mn>";}
return(t);
}  

proc mathmlHilfEncoding(string s)  {
string g;
string h=s+")";
while (h!=")") {
 g=g+h[2,find(h,")")-2]+",";
 h=h[find(h,")")+1,size(h)-find(h,")")];
 }
 g=g[1,size(g)-1];
return(g);
}

proc mathmlVariablesEncoding(string s)  {
string g;
 if (s[size(s)]==")") {
 g="<msub><mi>"+s[1,find(s,"(")-1]+"</mi><mn>"+mathmlHilfEncoding(s[find(s,"("),size(s)-find(s,"(")+1])+"</mn></msub>";
 }
 
else {g="<mi>"+s+"</mi>";}
return(g);
}

proc mathmlMonomial(poly a) {
string g;
intvec d=leadexp(a);
list e;
for(int q=1;q<=size(variables(a));q++)  {
e[q]=variables(a)[q];
}
int k=1;
for(int i=1;i<=size(d);i++)  {
  if (d[i]>0) {
  g=g+"<msup><mrow>"+mathmlVariablesEncoding(string(e[k]))+"</mrow><mn>";
  if (d[i]>1) {g=g+string(d[i]);}
  g=g+"</mn></msup>";
  k=k+1;}
  }   
return(g);
}

proc mathmlHilf(poly a,def r) {
string g;
poly d=a;
list l1=ringlist(r);
list l12=ringlist(r);
  for(int i=1;i<=size(l12[1][2]);i++) {
   l12[2][i]=l12[1][2][i]+"1";
   l12[1][2][i]=l12[1][2][i]+"0";
   }
  def w=ring(l12);
  setring(w);
 poly f=fetch(r,d);
 list l12=ringlist(basering);
  for (i=1;i<=size(l12[1][2]);i++) {
   f=subst(f,par(i),var(i));
   }
  while (size(l12[2])>size(l12[1][2])) {
   l12[2]=delete(l12[2],size(l12[1][2])+1);
   }
  for (i=1;i<=size(l12[2]);i++) {
   l12[2][i]=l12[2][i][1,size(l12[2][i])-1];
   }
 l12[1]=l12[1][1];
 def w2=ring(l12);
 setring(w2);
 poly f=fetch(w,f);
 g=g+mathmlPoly(f,w2);
 return(g);
}
 

proc mathmlPoly(poly a,def r){
string g;
number d=leadcoef(a);
list l12=ringlist(r);
int z=(typeof(l12[1])=="list");
 if (z==1) {if (d!=1) {
              if (denominator(d)==1) {g=g+"<mi>(</mi>"+mathmlHilf(d,r)+"<mi>)</mi>";}
              else {g=g+"<mfrac><mrow>"+mathmlHilf(numerator(d),r)+"</mrow><mrow>"+mathmlHilf(denominator(d),r)+"</mrow></mfrac>";}
            }
          }
else {
 g=g+mathmlLeadCoef(string(leadcoef(a)));
 }
setring(r);
 if (a==1) {g=g+"<mn>1</mn>";}
 if (a==-1){g=g+"<mn>-1</mn>";}
g=g+mathmlMonomial(leadmonom(a));
a=a-lead(a);
if (a!=0) {
 if (z==0) {if (poly(leadcoef(a))>0) {g=g+"<mo>+</mo>";}}
 else      {g=g+"<mo>+</mo>";}
  g=g+mathmlPoly(a,r);
 } 
return(g);
}

proc mathmlPolynom(poly d)  {
string g="<math xmlns=http://www.w3.org/1998/Math/MathML>";
g=g+mathmlPoly(d,basering);
return(g);
}


proc mathmlRing(def r){
string g="<math xmlns=http://www.w3.org/1998/Math/MathML>";
list l12=ringlist(r);
if (l12[1][1]==0) {g="<mi><mn>&rationals;</mn></mi>";}
else {g="<msub><mn>&integers;</mn><mn>"+string(l12[1][1])+"</mn></msub>";}
if (typeof(l12[1])=="list") {
 g=g+"<mi>[</mi>";
 for(int i=1;i<=size(l12[1][2]);i++) {
   g=g+mathmlVariablesEncoding(string(l12[1][2][i]))+"<mo>,</mo>";
  }
 g=g[1,size(g)-10]; 
 g=g+"<mo>]</mo>";
 if (l12[1][4]!=0) {
   list l1=l12;
   l1[1][4]=ideal(0);
   def w=ring(l1);
   setring(w);
   list l12=fetch(r,l12);
   g=g+"<mo>/</mo>"+mathmlPoly(l12[1][4][1],w);
  }
 }
 g=g+"<mi>[</mi>";
 for(int i=1;i<=size(l12[2]);i++) {
   g=g+mathmlVariablesEncoding(string(l12[2][i]))+"<mo>,</mo>";
  }
 g=g[1,size(g)-10]; 
 g=g+"<mo>]</mo>";
return(g)
;}
// usw
